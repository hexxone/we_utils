/**
 * @author hexxone / https://hexx.one
 *
 * @license
 * Copyright (c) 2021 hexxone All rights reserved.
 * Licensed under the GNU GENERAL PUBLIC LICENSE.
 * See LICENSE file in the project root for full license information.
 */

/**
 * This is just a definition wrapper.
 *
 * @see https://github.com/webpack-contrib/worker-loader
 */
declare module "worker-loader!*" {
	/**
	 * You need to change `Worker`, if:
	 * you specified a different value for the `workerType` option
	 */
	class WebpackWorker {
		constructor(options?: any);
		onmessage: ((ev: MessageEvent) => any) | null;
		onmessageerror: (( ev: MessageEvent) => any) | null;
		/** Clones message and transmits it to worker's global environment. transfer can be passed as a list of objects that are to be transferred rather than cloned. */
		postMessage(message: any, transfer: Transferable[]): void;
		postMessage(message: any, options?: StructuredSerializeOptions): void;
		/** Aborts worker's associated global environment. */
		terminate(): void;
		addEventListener<K extends keyof WorkerEventMap>(type: K, listener: (ev: WorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
		addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
		removeEventListener<K extends keyof WorkerEventMap>(type: K, listener: ( ev: WorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
		removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
	}

	/**
	 * Change this if you set the `esModule` option to `false`
	 * // export = WebpackWorker;
	 */
	export default WebpackWorker;
}
